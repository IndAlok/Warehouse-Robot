import os
import sys
import io

# Fix Windows console encoding for Unicode characters
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

def generate_env_file():
    """Interactive .env file generator"""
    print("="*70)
    print("         WAREHOUSE ROBOT - .ENV CONFIGURATION WIZARD")
    print("="*70)
    print()
    print("This wizard will help you create a proper .env configuration file.")
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  Warning: .env file already exists!")
        response = input("Do you want to overwrite it? (yes/no): ").lower()
        if response != 'yes':
            print("Aborted. Existing .env file kept.")
            return
        print()
    
    print("Please provide the following information:")
    print("-" * 70)
    
    # Database configuration
    print("\nüìä DATABASE CONFIGURATION")
    print("-" * 70)
    
    print("\nDatabase Type:")
    print("  1. Local PostgreSQL (default)")
    print("  2. Heroku Postgres")
    print("  3. Supabase")
    print("  4. Railway")
    print("  5. Custom connection string")
    
    db_choice = input("\nSelect option (1-5) [1]: ").strip() or "1"
    
    if db_choice == "1":
        # Local PostgreSQL
        print("\nLocal PostgreSQL Setup:")
        db_user = input("  Username [postgres]: ").strip() or "postgres"
        db_pass = input("  Password [postgres]: ").strip() or "postgres"
        db_host = input("  Host [localhost]: ").strip() or "localhost"
        db_port = input("  Port [5432]: ").strip() or "5432"
        db_name = input("  Database name [warehouse_db]: ").strip() or "warehouse_db"
        
        database_url = f"postgresql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}"
    
    elif db_choice == "5":
        # Custom
        print("\nEnter your full connection string:")
        print("Format: postgresql://user:pass@host:port/dbname")
        database_url = input("Connection string: ").strip()
    
    else:
        # Cloud services
        print("\nPaste your database connection string:")
        database_url = input("Connection string: ").strip()
    
    # Flask configuration
    print("\nüîê FLASK CONFIGURATION")
    print("-" * 70)
    
    print("\nEnvironment:")
    print("  1. Development (debug enabled, auto-reload)")
    print("  2. Production (optimized, no debug)")
    
    env_choice = input("\nSelect option (1-2) [1]: ").strip() or "1"
    flask_env = "development" if env_choice == "1" else "production"
    
    print("\nGenerate secure SECRET_KEY?")
    print("  1. Yes, generate random key (recommended)")
    print("  2. No, I'll provide my own")
    
    key_choice = input("\nSelect option (1-2) [1]: ").strip() or "1"
    
    if key_choice == "1":
        import secrets
        secret_key = secrets.token_hex(32)
        print(f"Generated key: {secret_key[:20]}... (full key will be in .env)")
    else:
        secret_key = input("Enter SECRET_KEY: ").strip()
    
    # Server configuration
    print("\nüåê SERVER CONFIGURATION")
    print("-" * 70)
    
    print("\nHost binding:")
    print("  1. 0.0.0.0 (accessible from network - recommended)")
    print("  2. 127.0.0.1 (localhost only)")
    
    host_choice = input("\nSelect option (1-2) [1]: ").strip() or "1"
    host = "0.0.0.0" if host_choice == "1" else "127.0.0.1"
    
    port = input("Port [5000]: ").strip() or "5000"
    
    # Generate .env content
    env_content = f"""# Warehouse Robot Configuration
# Generated by env_generator.py

# ============================================================
# DATABASE CONFIGURATION
# ============================================================
# Format: postgresql://username:password@host:port/database
# Example: postgresql://postgres:mypass@localhost:5432/warehouse_db
DATABASE_URL={database_url}

# ============================================================
# FLASK SECURITY
# ============================================================
# Secret key for session encryption and CSRF protection
# NEVER share this key or commit it to public repositories
SECRET_KEY={secret_key}

# ============================================================
# FLASK ENVIRONMENT
# ============================================================
# development: Debug mode ON, auto-reload enabled
# production:  Debug mode OFF, optimized for deployment
FLASK_ENV={flask_env}

# ============================================================
# SERVER CONFIGURATION
# ============================================================
# Host: 0.0.0.0 = all interfaces, 127.0.0.1 = localhost only
HOST={host}

# Port: Default Flask port is 5000
PORT={port}

# ============================================================
# NOTES
# ============================================================
# - Update DATABASE_URL if you change PostgreSQL credentials
# - Generate new SECRET_KEY for production deployment
# - Change FLASK_ENV to 'production' before deploying
# - Never commit this file to version control (.gitignored)
"""
    
    # Write to file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n" + "="*70)
        print("‚úÖ .ENV FILE CREATED SUCCESSFULLY!")
        print("="*70)
        print(f"\nFile location: {os.path.abspath('.env')}")
        print("\nConfiguration Summary:")
        print("-" * 70)
        print(f"Database URL: {database_url[:50]}...")
        print(f"Flask Environment: {flask_env}")
        print(f"Server Host: {host}")
        print(f"Server Port: {port}")
        print(f"Secret Key: {secret_key[:20]}... (hidden)")
        print()
        print("Next steps:")
        print("  1. Test database connection: python test_db_connection.py")
        print("  2. Setup database tables: python setup_database.py")
        print("  3. Start the server: python app.py")
        print()
        
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")

if __name__ == "__main__":
    generate_env_file()
