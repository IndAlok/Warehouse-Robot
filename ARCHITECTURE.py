"""
═══════════════════════════════════════════════════════════════════
        WAREHOUSE ROBOT SYSTEM - ARCHITECTURE DIAGRAM
═══════════════════════════════════════════════════════════════════


                    COMPLETE SYSTEM FLOW
                    ═══════════════════

┌─────────────────────────────────────────────────────────────────┐
│                         USER INTERFACE                          │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────┐              ┌─────────────────┐          │
│  │  Robot Scanner  │              │  Web Browser    │          │
│  │   (robot.py)    │              │  (Dashboard)    │          │
│  │                 │              │                 │          │
│  │  ┌───────────┐  │              │  ┌───────────┐  │          │
│  │  │  Camera   │  │              │  │Live Video │  │          │
│  │  │  OpenCV   │  │              │  │Statistics │  │          │
│  │  │  QR Scan  │  │              │  │  History  │  │          │
│  │  └───────────┘  │              │  └───────────┘  │          │
│  └────────┬────────┘              └────────┬────────┘          │
│           │                                │                   │
└───────────┼────────────────────────────────┼───────────────────┘
            │                                │
            │ HTTP POST                      │ HTTP GET
            │ /upload_frame                  │ /video_feed
            │ /verify_qr                     │ /scan_history
            │                                │
            └────────────────┬───────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────┐
│                      FLASK WEB SERVER                           │
│                         (app.py)                                │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │              VIDEO STREAM MANAGER                        │  │
│  │  • Receives frames from robot                            │  │
│  │  • Serves MJPEG stream to browsers                       │  │
│  │  • Thread-safe frame buffering                           │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │              QR VERIFICATION ENGINE                      │  │
│  │  • Parse QR data (category/product/location)             │  │
│  │  • Query database for product                            │  │
│  │  • Compare expected vs actual location                   │  │
│  │  • Return: CORRECT / MISPLACED / NOT_FOUND / INVALID     │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │                  REST API ENDPOINTS                      │  │
│  │  GET  /              → Dashboard HTML                    │  │
│  │  GET  /video_feed    → MJPEG stream                      │  │
│  │  GET  /health        → Server status                     │  │
│  │  GET  /products      → Product list                      │  │
│  │  GET  /scan_history  → Scan logs                         │  │
│  │  POST /verify_qr     → QR verification                   │  │
│  │  POST /upload_frame  → Frame upload                      │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
└─────────────────────────┬───────────────────────────────────────┘
                          │
                          │ SQLAlchemy ORM
                          │
                          ▼
┌─────────────────────────────────────────────────────────────────┐
│                    PostgreSQL DATABASE                          │
│                      (warehouse_db)                             │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────┐   ┌─────────────┐   ┌─────────────┐          │
│  │ categories  │   │  locations  │   │  products   │          │
│  ├─────────────┤   ├─────────────┤   ├─────────────┤          │
│  │ id (PK)     │   │ id (PK)     │   │ id (PK)     │          │
│  │ name        │   │ shelf_num   │   │ name        │          │
│  │ description │   │ block       │   │ sku         │          │
│  │ created_at  │   │ zone        │   │ category_id │──┐       │
│  │             │   │ capacity    │   │ location_id │──┼─┐     │
│  └──────┬──────┘   └──────┬──────┘   │ qr_code     │  │ │     │
│         │                 │           │ quantity    │  │ │     │
│         │                 │           │ price       │  │ │     │
│         │                 │           │ is_active   │  │ │     │
│         │                 │           └──────┬──────┘  │ │     │
│         │                 │                  │         │ │     │
│         └─────────────────┼──────────────────┘         │ │     │
│                           └────────────────────────────┘ │     │
│                                                          │     │
│  ┌─────────────────────────────────────────────────────┐ │     │
│  │              scan_logs                              │ │     │
│  ├─────────────────────────────────────────────────────┤ │     │
│  │ id (PK)                                             │ │     │
│  │ product_id (FK) ────────────────────────────────────┼─┘     │
│  │ qr_data                                             │       │
│  │ scanned_location_id (FK) ───────────────────────────┼───────┘
│  │ is_correct_location                                 │
│  │ status (correct/misplaced/invalid/not_found)        │
│  │ message                                             │
│  │ timestamp                                           │
│  └─────────────────────────────────────────────────────┘
│                                                                 │
│  Total Records:                                                │
│  • 6 Categories                                                │
│  • 6 Locations                                                 │
│  • 16 Products                                                 │
│  • Growing scan logs                                           │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘


                    DATA FLOW EXAMPLE
                    ═════════════════

1. SCANNING PROCESS:
   ┌──────────────────────────────────────────────────────┐
   │ User holds QR code "1/1/1" in front of camera        │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: OpenCV detects QR code                     │
   │ Extracted data: "1/1/1"                              │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: HTTP POST to /verify_qr                    │
   │ Body: {"qr_data": "1/1/1"}                           │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ app.py: Parse QR data                                │
   │ category_id = 1, product_id = 1, location_id = 1     │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ database.py: Query for product with qr_code="1/1/1"  │
   │ Found: Dove Beauty Bar                               │
   │ Expected location: Shelf 1, Block A (id=1)           │
   │ Category: Soap (id=1)                                │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ app.py: Compare                                      │
   │ Product category_id (1) == scanned (1) ✓             │
   │ Product location_id (1) == scanned (1) ✓             │
   │ Result: CORRECT PLACEMENT                            │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ database.py: Insert scan log                         │
   │ status = "correct", is_correct = true                │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ app.py: Return JSON response                         │
   │ {                                                    │
   │   "status": "correct",                               │
   │   "is_correct": true,                                │
   │   "message": "✅ CORRECT: Dove at right location"   │
   │ }                                                    │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: Display green box around QR               │
   │ Show overlay: "✅ CORRECT PLACEMENT"                 │
   │ Product: Dove Beauty Bar                            │
   └──────────────────────────────────────────────────────┘


2. VIDEO STREAMING PROCESS:
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: Capture frame from camera                  │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: Encode frame as JPEG (threaded)            │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ robot.py: HTTP POST to /upload_frame                 │
   │ Multipart form: frame=<jpeg_bytes>                   │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ app.py: VideoStreamManager receives frame            │
   │ Stores in thread-safe buffer                         │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ Browser: GET /video_feed                             │
   └────────────────────┬─────────────────────────────────┘
                        │
                        ▼
   ┌──────────────────────────────────────────────────────┐
   │ app.py: Stream frames as MJPEG                       │
   │ Content-Type: multipart/x-mixed-replace              │
   └──────────────────────────────────────────────────────┘


                    DEPLOYMENT DIAGRAM
                    ══════════════════

LOCAL DEVELOPMENT:
┌─────────────────────────────────────────────────────────┐
│                    Your Computer                        │
│  ┌────────────┐      ┌────────────┐    ┌────────────┐  │
│  │  robot.py  │──────│   app.py   │────│ PostgreSQL │  │
│  │ (Terminal) │ HTTP │ (Terminal) │SQL │ (Local DB) │  │
│  └────────────┘      └──────┬─────┘    └────────────┘  │
│                             │                           │
│                      ┌──────┴──────┐                    │
│                      │   Browser   │                    │
│                      │ localhost:  │                    │
│                      │    5000     │                    │
│                      └─────────────┘                    │
└─────────────────────────────────────────────────────────┘


CLOUD DEPLOYMENT:
┌─────────────────────────────────────────────────────────┐
│                    Your Computer                        │
│  ┌────────────┐                                         │
│  │  robot.py  │─────────┐                               │
│  └────────────┘         │                               │
│                         │ HTTPS                         │
└─────────────────────────┼─────────────────────────────┐ │
                          │                             │ │
                          ▼                             │ │
┌─────────────────────────────────────────────────────┐ │ │
│                    CLOUD PLATFORM                   │ │ │
│          (Heroku / Railway / Render / AWS)          │ │ │
│  ┌────────────────────────────────────────────────┐ │ │ │
│  │              app.py (Flask Server)             │ │ │ │
│  │  • Receives QR verification requests           │ │ │ │
│  │  • Streams video to web browsers               │ │ │ │
│  │  • Serves web dashboard                        │ │ │ │
│  └──────────────────┬─────────────────────────────┘ │ │ │
│                     │                               │ │ │
│                     │ SQL                           │ │ │
│                     ▼                               │ │ │
│  ┌────────────────────────────────────────────────┐ │ │ │
│  │        PostgreSQL Database (Cloud)             │ │ │ │
│  │  • Products, Categories, Locations             │ │ │ │
│  │  • Scan history logs                           │ │ │ │
│  └────────────────────────────────────────────────┘ │ │ │
│                                                     │ │ │
│  URL: https://your-app.herokuapp.com (or similar)  │ │ │
└─────────────────────────────────────────────────────┘ │ │
                          ▲                             │ │
                          │ HTTPS                       │ │
                          │                             │ │
┌─────────────────────────┼─────────────────────────────┼─┘
│              Any Device with Browser                │ │
│  ┌──────────────────────────────────────────────┐   │ │
│  │  Web Dashboard                               │   │ │
│  │  • Live video stream                         │   │ │
│  │  • Statistics                                │   │ │
│  │  • Scan history                              │   │ │
│  └──────────────────────────────────────────────┘   │ │
└──────────────────────────────────────────────────────┘ │
                                                         │
═════════════════════════════════════════════════════════┘

"""

if __name__ == "__main__":
    print(__doc__)
